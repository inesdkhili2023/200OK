{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JobApplicationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8081/jobapplications';\n  }\n  // Méthode pour envoyer la candidature\n  submitJobApplication(FormData) {\n    return this.http.post(`${this.apiUrl}/apply`, FormData);\n  }\n  getJobApplications() {\n    return this.http.get(`${this.apiUrl}/getAll`);\n  }\n  updateApplication(jobApp) {\n    return this.http.put(`${this.apiUrl}/${jobApp.jobAppId}`, jobApp);\n  }\n  deleteJobApplication(jobAppId) {\n    return this.http.delete(`${this.apiUrl}/${jobAppId}`);\n  }\n  getJobApplicationById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(tap(data => console.log(\"Candidature récupérée:\", data)) // Vérifie si jobOffer est présent\n    );\n  }\n\n  getApplicationsByJobOffer(jobOfferId) {\n    return this.http.get(`${this.apiUrl}/jobOffer/${jobOfferId}`);\n  }\n  updateJobApplicationStatus(applicationId, status) {\n    return this.http.put(`${this.apiUrl}/${applicationId}/status?status=${status}`, {});\n  }\n  getFile(fileName) {\n    return this.http.get(`${this.apiUrl}/files/${fileName}`, {\n      responseType: 'blob'\n    });\n  }\n  static {\n    this.ɵfac = function JobApplicationService_Factory(t) {\n      return new (t || JobApplicationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JobApplicationService,\n      factory: JobApplicationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","JobApplicationService","constructor","http","apiUrl","submitJobApplication","FormData","post","getJobApplications","get","updateApplication","jobApp","put","jobAppId","deleteJobApplication","delete","getJobApplicationById","id","pipe","data","console","log","getApplicationsByJobOffer","jobOfferId","updateJobApplicationStatus","applicationId","status","getFile","fileName","responseType","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\services\\job-application.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobApplicationService {\n\n  private apiUrl = 'http://localhost:8081/jobapplications'; \n\n  constructor(private http: HttpClient) {}\n\n  // Méthode pour envoyer la candidature\n  submitJobApplication(FormData: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/apply`, FormData);\n  }\n  getJobApplications(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/getAll`);\n  }\n  updateApplication(jobApp: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/${jobApp.jobAppId}`, jobApp);\n  }\n\n  deleteJobApplication(jobAppId: any): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${jobAppId}`);\n  }\n  getJobApplicationById(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`).pipe(\n      tap(data => console.log(\"Candidature récupérée:\", data)) // Vérifie si jobOffer est présent\n    );\n}\ngetApplicationsByJobOffer(jobOfferId: number): Observable<any[]> {\n  return this.http.get<any[]>(`${this.apiUrl}/jobOffer/${jobOfferId}`);\n}\nupdateJobApplicationStatus(applicationId: number, status: string): Observable<void> {\n  return this.http.put<void>(`${this.apiUrl}/${applicationId}/status?status=${status}`, \n    {}\n  );\n}\ngetFile(fileName:string):Observable<Blob>{\nreturn this.http.get(`${this.apiUrl}/files/${fileName}`,{\n  responseType:'blob'});\n}\n}\n\n\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uCAAuC;EAEjB;EAEvC;EACAC,oBAAoBA,CAACC,QAAa;IAChC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEE,QAAQ,CAAC;EAC9D;EACAE,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,MAAM,SAAS,CAAC;EACtD;EACAM,iBAAiBA,CAACC,MAAW;IAC3B,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,MAAM,IAAIO,MAAM,CAACE,QAAQ,EAAE,EAAEF,MAAM,CAAC;EACnE;EAEAG,oBAAoBA,CAACD,QAAa;IAChC,OAAO,IAAI,CAACV,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACX,MAAM,IAAIS,QAAQ,EAAE,CAAC;EACvD;EACAG,qBAAqBA,CAACC,EAAU;IAC9B,OAAO,IAAI,CAACd,IAAI,CAACM,GAAG,CAAM,GAAG,IAAI,CAACL,MAAM,IAAIa,EAAE,EAAE,CAAC,CAACC,IAAI,CACpDlB,GAAG,CAACmB,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAAC,CAAC,CAAC;KAC1D;EACL;;EACAG,yBAAyBA,CAACC,UAAkB;IAC1C,OAAO,IAAI,CAACpB,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,MAAM,aAAamB,UAAU,EAAE,CAAC;EACtE;EACAC,0BAA0BA,CAACC,aAAqB,EAAEC,MAAc;IAC9D,OAAO,IAAI,CAACvB,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,MAAM,IAAIqB,aAAa,kBAAkBC,MAAM,EAAE,EAClF,EAAE,CACH;EACH;EACAC,OAAOA,CAACC,QAAe;IACvB,OAAO,IAAI,CAACzB,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACL,MAAM,UAAUwB,QAAQ,EAAE,EAAC;MACtDC,YAAY,EAAC;KAAO,CAAC;EACvB;;;uBApCa5B,qBAAqB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAArBhC,qBAAqB;MAAAiC,OAAA,EAArBjC,qBAAqB,CAAAkC,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}