{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class VoiceRecognitionService {\n  constructor() {\n    this.recognition = new webkitSpeechRecognition();\n    this.isStoppedSpeechRecog = false;\n    this.tempWords = '';\n    this.text = '';\n    this.transcript = new BehaviorSubject('');\n    this.transcript$ = this.transcript.asObservable();\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'en-US';\n  }\n  init() {\n    this.recognition.addEventListener('result', event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n      this.tempWords = transcript;\n    });\n  }\n  start() {\n    this.isStoppedSpeechRecog = false;\n    this.recognition.start();\n    console.log('Speech recognition started');\n    this.recognition.addEventListener('end', () => {\n      if (this.isStoppedSpeechRecog) {\n        this.recognition.stop();\n        console.log('End speech recognition');\n      } else {\n        this.wordConcat();\n        this.recognition.start();\n      }\n    });\n  }\n  stop() {\n    this.isStoppedSpeechRecog = true;\n    this.wordConcat();\n    this.recognition.stop();\n    console.log('End speech recognition');\n  }\n  wordConcat() {\n    this.text = `${this.text} ${this.tempWords}.`;\n    this.transcript.next(this.text); // <--- Ajoute cette ligne\n    this.tempWords = '';\n  }\n  static {\n    this.ɵfac = function VoiceRecognitionService_Factory(t) {\n      return new (t || VoiceRecognitionService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VoiceRecognitionService,\n      factory: VoiceRecognitionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","VoiceRecognitionService","constructor","recognition","webkitSpeechRecognition","isStoppedSpeechRecog","tempWords","text","transcript","transcript$","asObservable","interimResults","lang","init","addEventListener","event","Array","from","results","map","result","join","start","console","log","stop","wordConcat","next","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\services\\voice-recognition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\ndeclare var webkitSpeechRecognition: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoiceRecognitionService {\n\n  recognition = new webkitSpeechRecognition();\n  isStoppedSpeechRecog = false;\n  tempWords: string = '';\n  text: string = '';\n  private transcript = new BehaviorSubject<string>('');\n  public transcript$ = this.transcript.asObservable();\n  constructor() {\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'en-US';\n  }\n\n  init() {\n    this.recognition.addEventListener('result', (event: any) => {\n      const transcript = Array.from(event.results)\n        .map((result: any) => result[0])\n        .map((result: any) => result.transcript)\n        .join('');\n      this.tempWords = transcript;\n    });\n  }\n\n  start() {\n    this.isStoppedSpeechRecog = false;\n    this.recognition.start();\n    console.log('Speech recognition started');\n\n    this.recognition.addEventListener('end', () => {\n      if (this.isStoppedSpeechRecog) {\n        this.recognition.stop();\n        console.log('End speech recognition');\n      } else {\n        this.wordConcat();\n        this.recognition.start();\n      }\n    });\n  }\n\n  stop() {\n    this.isStoppedSpeechRecog = true;\n    this.wordConcat();\n    this.recognition.stop();\n    console.log('End speech recognition');\n  }\n\n  wordConcat() {\n    this.text = `${this.text} ${this.tempWords}.`;\n    this.transcript.next(this.text); // <--- Ajoute cette ligne\n    this.tempWords = '';\n  }\n  \n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAMtC,OAAM,MAAOC,uBAAuB;EAQlCC,YAAA;IANA,KAAAC,WAAW,GAAG,IAAIC,uBAAuB,EAAE;IAC3C,KAAAC,oBAAoB,GAAG,KAAK;IAC5B,KAAAC,SAAS,GAAW,EAAE;IACtB,KAAAC,IAAI,GAAW,EAAE;IACT,KAAAC,UAAU,GAAG,IAAIR,eAAe,CAAS,EAAE,CAAC;IAC7C,KAAAS,WAAW,GAAG,IAAI,CAACD,UAAU,CAACE,YAAY,EAAE;IAEjD,IAAI,CAACP,WAAW,CAACQ,cAAc,GAAG,IAAI;IACtC,IAAI,CAACR,WAAW,CAACS,IAAI,GAAG,OAAO;EACjC;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACV,WAAW,CAACW,gBAAgB,CAAC,QAAQ,EAAGC,KAAU,IAAI;MACzD,MAAMP,UAAU,GAAGQ,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAC/BD,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAACZ,UAAU,CAAC,CACvCa,IAAI,CAAC,EAAE,CAAC;MACX,IAAI,CAACf,SAAS,GAAGE,UAAU;IAC7B,CAAC,CAAC;EACJ;EAEAc,KAAKA,CAAA;IACH,IAAI,CAACjB,oBAAoB,GAAG,KAAK;IACjC,IAAI,CAACF,WAAW,CAACmB,KAAK,EAAE;IACxBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAEzC,IAAI,CAACrB,WAAW,CAACW,gBAAgB,CAAC,KAAK,EAAE,MAAK;MAC5C,IAAI,IAAI,CAACT,oBAAoB,EAAE;QAC7B,IAAI,CAACF,WAAW,CAACsB,IAAI,EAAE;QACvBF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;OACtC,MAAM;QACL,IAAI,CAACE,UAAU,EAAE;QACjB,IAAI,CAACvB,WAAW,CAACmB,KAAK,EAAE;;IAE5B,CAAC,CAAC;EACJ;EAEAG,IAAIA,CAAA;IACF,IAAI,CAACpB,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACqB,UAAU,EAAE;IACjB,IAAI,CAACvB,WAAW,CAACsB,IAAI,EAAE;IACvBF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;EAEAE,UAAUA,CAAA;IACR,IAAI,CAACnB,IAAI,GAAG,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAACD,SAAS,GAAG;IAC7C,IAAI,CAACE,UAAU,CAACmB,IAAI,CAAC,IAAI,CAACpB,IAAI,CAAC,CAAC,CAAC;IACjC,IAAI,CAACD,SAAS,GAAG,EAAE;EACrB;;;uBAlDWL,uBAAuB;IAAA;EAAA;;;aAAvBA,uBAAuB;MAAA2B,OAAA,EAAvB3B,uBAAuB,CAAA4B,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}