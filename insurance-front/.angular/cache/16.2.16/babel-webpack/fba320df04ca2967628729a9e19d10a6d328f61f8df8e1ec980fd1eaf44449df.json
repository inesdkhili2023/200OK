{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class VoiceRecognitionService {\n  constructor() {\n    this.isListening = false;\n    this.text = '';\n    this.tempWords = '';\n    this.transcript = new Subject();\n    this.buttonText = new BehaviorSubject('Dicter'); // Nouveau BehaviorSubject pour le bouton\n    const {\n      webkitSpeechRecognition\n    } = window;\n    this.recognition = new webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'fr-FR';\n    this.recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      this.tempWords = transcript;\n    };\n    this.recognition.onend = () => {\n      this.wordConcat();\n      this.isListening = false;\n      console.log('End speech recognition');\n      this.buttonText.next('Dicter'); // Mettre à jour le texte du bouton\n    };\n  }\n\n  start() {\n    if (!this.isListening) {\n      this.recognition.start();\n      this.isListening = true;\n      console.log('Speech recognition started');\n      this.buttonText.next('Stop'); // Mettre à jour le texte du bouton\n    } else {\n      console.log('Recognition is already running');\n    }\n  }\n  stop() {\n    if (this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n      console.log('Speech recognition stopped');\n    }\n  }\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}.`.replace(/\\s+/g, ' ').trim();\n      this.transcript.next(this.text);\n      this.tempWords = '';\n    }\n  }\n  getTranscript() {\n    return this.transcript.asObservable();\n  }\n  getButtonText() {\n    return this.buttonText.asObservable(); // Retourner l'état du bouton\n  }\n\n  static {\n    this.ɵfac = function VoiceRecognitionService_Factory(t) {\n      return new (t || VoiceRecognitionService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VoiceRecognitionService,\n      factory: VoiceRecognitionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","Subject","VoiceRecognitionService","constructor","isListening","text","tempWords","transcript","buttonText","webkitSpeechRecognition","window","recognition","continuous","interimResults","lang","onresult","event","Array","from","results","map","result","join","onend","wordConcat","console","log","next","start","stop","trim","replace","getTranscript","asObservable","getButtonText","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\services\\voice-recognition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\ndeclare var webkitSpeechRecognition: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoiceRecognitionService {\n  recognition: any;\n  isListening = false;\n  text = '';\n  tempWords = '';\n  transcript = new Subject<string>();\n  buttonText = new BehaviorSubject<string>('Dicter');  // Nouveau BehaviorSubject pour le bouton\n\n  constructor() {\n    const { webkitSpeechRecognition }: IWindow = window as IWindo;\n    this.recognition = new webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'fr-FR';\n\n    this.recognition.onresult = (event: any) => {\n      const transcript = Array.from(event.results)\n        .map((result: any) => result[0].transcript)\n        .join('');\n      this.tempWords = transcript;\n    };\n\n    this.recognition.onend = () => {\n      this.wordConcat();\n      this.isListening = false;\n      console.log('End speech recognition');\n      this.buttonText.next('Dicter'); // Mettre à jour le texte du bouton\n    };\n  }\n\n  start() {\n    if (!this.isListening) {\n      this.recognition.start();\n      this.isListening = true;\n      console.log('Speech recognition started');\n      this.buttonText.next('Stop'); // Mettre à jour le texte du bouton\n    } else {\n      console.log('Recognition is already running');\n    }\n  }\n\n  stop() {\n    if (this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n      console.log('Speech recognition stopped');\n    }\n  }\n\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}.`.replace(/\\s+/g, ' ').trim();\n      this.transcript.next(this.text);\n      this.tempWords = '';\n    }\n  }\n\n  getTranscript(): Observable<string> {\n    return this.transcript.asObservable();\n  }\n\n  getButtonText(): Observable<string> {\n    return this.buttonText.asObservable();  // Retourner l'état du bouton\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,EAAcC,OAAO,QAAQ,MAAM;;AAO3D,OAAM,MAAOC,uBAAuB;EAQlCC,YAAA;IANA,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,IAAI,GAAG,EAAE;IACT,KAAAC,SAAS,GAAG,EAAE;IACd,KAAAC,UAAU,GAAG,IAAIN,OAAO,EAAU;IAClC,KAAAO,UAAU,GAAG,IAAIR,eAAe,CAAS,QAAQ,CAAC,CAAC,CAAE;IAGnD,MAAM;MAAES;IAAuB,CAAE,GAAYC,MAAgB;IAC7D,IAAI,CAACC,WAAW,GAAG,IAAIF,uBAAuB,EAAE;IAChD,IAAI,CAACE,WAAW,CAACC,UAAU,GAAG,IAAI;IAClC,IAAI,CAACD,WAAW,CAACE,cAAc,GAAG,IAAI;IACtC,IAAI,CAACF,WAAW,CAACG,IAAI,GAAG,OAAO;IAE/B,IAAI,CAACH,WAAW,CAACI,QAAQ,GAAIC,KAAU,IAAI;MACzC,MAAMT,UAAU,GAAGU,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACd,UAAU,CAAC,CAC1Ce,IAAI,CAAC,EAAE,CAAC;MACX,IAAI,CAAChB,SAAS,GAAGC,UAAU;IAC7B,CAAC;IAED,IAAI,CAACI,WAAW,CAACY,KAAK,GAAG,MAAK;MAC5B,IAAI,CAACC,UAAU,EAAE;MACjB,IAAI,CAACpB,WAAW,GAAG,KAAK;MACxBqB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,IAAI,CAAClB,UAAU,CAACmB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClC,CAAC;EACH;;EAEAC,KAAKA,CAAA;IACH,IAAI,CAAC,IAAI,CAACxB,WAAW,EAAE;MACrB,IAAI,CAACO,WAAW,CAACiB,KAAK,EAAE;MACxB,IAAI,CAACxB,WAAW,GAAG,IAAI;MACvBqB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,CAAClB,UAAU,CAACmB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KAC/B,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;EAEjD;EAEAG,IAAIA,CAAA;IACF,IAAI,IAAI,CAACzB,WAAW,EAAE;MACpB,IAAI,CAACO,WAAW,CAACkB,IAAI,EAAE;MACvB,IAAI,CAACzB,WAAW,GAAG,KAAK;MACxBqB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;EAE7C;EAEAF,UAAUA,CAAA;IACR,IAAI,IAAI,CAAClB,SAAS,CAACwB,IAAI,EAAE,EAAE;MACzB,IAAI,CAACzB,IAAI,GAAG,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAACC,SAAS,GAAG,CAACyB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACD,IAAI,EAAE;MACzE,IAAI,CAACvB,UAAU,CAACoB,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC;MAC/B,IAAI,CAACC,SAAS,GAAG,EAAE;;EAEvB;EAEA0B,aAAaA,CAAA;IACX,OAAO,IAAI,CAACzB,UAAU,CAAC0B,YAAY,EAAE;EACvC;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAAC1B,UAAU,CAACyB,YAAY,EAAE,CAAC,CAAE;EAC1C;;;;uBA/DW/B,uBAAuB;IAAA;EAAA;;;aAAvBA,uBAAuB;MAAAiC,OAAA,EAAvBjC,uBAAuB,CAAAkC,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}