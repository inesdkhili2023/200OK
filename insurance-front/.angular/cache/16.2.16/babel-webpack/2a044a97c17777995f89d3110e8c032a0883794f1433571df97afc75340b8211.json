{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class VoiceRecognitionService {\n  constructor() {\n    this.recognition = any;\n    this.isStoppedSpeechRecog = false;\n    this.tempWords = '';\n    this.text = '';\n    this.isListening = false;\n    this.transcript = new BehaviorSubject('');\n    this.transcript$ = this.transcript.asObservable();\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'en-US';\n  }\n  init() {\n    this.recognition.addEventListener('result', event => {\n      const transcript = Array.from(event.results).map(result => result[0]).map(result => result.transcript).join('');\n      this.tempWords = transcript;\n    });\n  }\n  start() {\n    this.isStoppedSpeechRecog = false;\n    this.recognition.start();\n    console.log('Speech recognition started');\n    this.recognition.addEventListener('end', () => {\n      if (this.isStoppedSpeechRecog) {\n        this.recognition.stop();\n        console.log('End speech recognition');\n      } else {\n        this.wordConcat();\n        this.recognition.start();\n      }\n    });\n  }\n  stop() {\n    this.isStoppedSpeechRecog = true;\n    this.wordConcat();\n    this.recognition.stop();\n    console.log('End speech recognition');\n  }\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}`.trim();\n      this.transcript.next(this.text); // Ajoute ça pour mettre à jour le flux observable\n      this.tempWords = '';\n    }\n  }\n  static {\n    this.ɵfac = function VoiceRecognitionService_Factory(t) {\n      return new (t || VoiceRecognitionService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VoiceRecognitionService,\n      factory: VoiceRecognitionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","VoiceRecognitionService","constructor","recognition","any","isStoppedSpeechRecog","tempWords","text","isListening","transcript","transcript$","asObservable","interimResults","lang","init","addEventListener","event","Array","from","results","map","result","join","start","console","log","stop","wordConcat","trim","next","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\services\\voice-recognition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\ndeclare var webkitSpeechRecognition: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoiceRecognitionService {\n\n  recognition = any;\n  isStoppedSpeechRecog = false;\n  tempWords: string = '';\n  text: string = '';\n  isListening = false;\n\n  private transcript = new BehaviorSubject<string>('');\n  public transcript$ = this.transcript.asObservable();\n  constructor() {\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'en-US';\n  }\n\n  init() {\n    this.recognition.addEventListener('result', (event: any) => {\n      const transcript = Array.from(event.results)\n        .map((result: any) => result[0])\n        .map((result: any) => result.transcript)\n        .join('');\n      this.tempWords = transcript;\n    });\n  }\n\n  start() {\n    this.isStoppedSpeechRecog = false;\n    this.recognition.start();\n    console.log('Speech recognition started');\n\n    this.recognition.addEventListener('end', () => {\n      if (this.isStoppedSpeechRecog) {\n        this.recognition.stop();\n        console.log('End speech recognition');\n      } else {\n        this.wordConcat();\n        this.recognition.start();\n      }\n    });\n  }\n\n  stop() {\n    this.isStoppedSpeechRecog = true;\n    this.wordConcat();\n    this.recognition.stop();\n    console.log('End speech recognition');\n  }\n\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}`.trim();\n      this.transcript.next(this.text); // Ajoute ça pour mettre à jour le flux observable\n      this.tempWords = '';\n    }\n  }\n  \n  \n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAMtC,OAAM,MAAOC,uBAAuB;EAUlCC,YAAA;IARA,KAAAC,WAAW,GAAGC,GAAG;IACjB,KAAAC,oBAAoB,GAAG,KAAK;IAC5B,KAAAC,SAAS,GAAW,EAAE;IACtB,KAAAC,IAAI,GAAW,EAAE;IACjB,KAAAC,WAAW,GAAG,KAAK;IAEX,KAAAC,UAAU,GAAG,IAAIT,eAAe,CAAS,EAAE,CAAC;IAC7C,KAAAU,WAAW,GAAG,IAAI,CAACD,UAAU,CAACE,YAAY,EAAE;IAEjD,IAAI,CAACR,WAAW,CAACS,cAAc,GAAG,IAAI;IACtC,IAAI,CAACT,WAAW,CAACU,IAAI,GAAG,OAAO;EACjC;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACX,WAAW,CAACY,gBAAgB,CAAC,QAAQ,EAAGC,KAAU,IAAI;MACzD,MAAMP,UAAU,GAAGQ,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAC/BD,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAACZ,UAAU,CAAC,CACvCa,IAAI,CAAC,EAAE,CAAC;MACX,IAAI,CAAChB,SAAS,GAAGG,UAAU;IAC7B,CAAC,CAAC;EACJ;EAEAc,KAAKA,CAAA;IACH,IAAI,CAAClB,oBAAoB,GAAG,KAAK;IACjC,IAAI,CAACF,WAAW,CAACoB,KAAK,EAAE;IACxBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAEzC,IAAI,CAACtB,WAAW,CAACY,gBAAgB,CAAC,KAAK,EAAE,MAAK;MAC5C,IAAI,IAAI,CAACV,oBAAoB,EAAE;QAC7B,IAAI,CAACF,WAAW,CAACuB,IAAI,EAAE;QACvBF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;OACtC,MAAM;QACL,IAAI,CAACE,UAAU,EAAE;QACjB,IAAI,CAACxB,WAAW,CAACoB,KAAK,EAAE;;IAE5B,CAAC,CAAC;EACJ;EAEAG,IAAIA,CAAA;IACF,IAAI,CAACrB,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACsB,UAAU,EAAE;IACjB,IAAI,CAACxB,WAAW,CAACuB,IAAI,EAAE;IACvBF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC;EAEAE,UAAUA,CAAA;IACR,IAAI,IAAI,CAACrB,SAAS,CAACsB,IAAI,EAAE,EAAE;MACzB,IAAI,CAACrB,IAAI,GAAG,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAACD,SAAS,EAAE,CAACsB,IAAI,EAAE;MACnD,IAAI,CAACnB,UAAU,CAACoB,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC,CAAC,CAAC;MACjC,IAAI,CAACD,SAAS,GAAG,EAAE;;EAEvB;;;uBAtDWL,uBAAuB;IAAA;EAAA;;;aAAvBA,uBAAuB;MAAA6B,OAAA,EAAvB7B,uBAAuB,CAAA8B,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}