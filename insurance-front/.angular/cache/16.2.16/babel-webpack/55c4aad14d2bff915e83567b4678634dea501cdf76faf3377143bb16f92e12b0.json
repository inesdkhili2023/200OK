{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NavigationEnd } from '@angular/router';\nimport { map } from 'rxjs';\nexport let JobApplicationFormComponent = class JobApplicationFormComponent {\n  constructor(fb, jobApplicationService, jobOfferService, pr, voiceRecognitionService, route, location, router, http) {\n    this.fb = fb;\n    this.jobApplicationService = jobApplicationService;\n    this.jobOfferService = jobOfferService;\n    this.route = route;\n    this.location = location;\n    this.router = router;\n    this.http = http;\n    this.closeFormEvent = new EventEmitter();\n    this.message = '';\n    this.jobReference = null;\n    this.selectedJobId = null;\n    this.siteKey = '6Le5S-MqAAAAALSbrYTUmV1IgrBQPBExN4zJpBVq';\n    this.submitted = false; // Variable pour suivre l'état de soumission\n    this.isListening = false;\n    this.id = this.route.snapshot.paramMap.get('id'); // Récupérer l'ID depuis l'URL\n    this.cvFile = null;\n    this.lettreMotivationFile = null;\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        window.scrollTo(0, 0); // Remonte en haut de la page\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.voiceRecognitionService.init();\n    const storedJob = localStorage.getItem('selectedJob');\n    if (storedJob) {\n      this.selectedJob = JSON.parse(storedJob);\n    }\n    const jobOfferId = this.route.snapshot.paramMap.get('id'); // Récupérer l'ID depuis l'URL\n    // Vérifier l'ID du job dans l'URL\n    console.log('ID du job dans l\\'URL:', jobOfferId);\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.jobOfferId = +id; // Convert string to number\n      }\n    });\n\n    this.jobApplicationForm = this.fb.group({\n      civilite: ['', Validators.required],\n      nom: ['', [Validators.required, Validators.minLength(2)]],\n      prenom: ['', [Validators.required, Validators.minLength(2)]],\n      dateNaissance: ['', [Validators.required, this.dateNaissanceValidator]],\n      email: ['', [Validators.required, Validators.email]],\n      confirmEmail: ['', [Validators.required, Validators.email]],\n      telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n      adresse: ['', Validators.required],\n      ville: ['', Validators.required],\n      codePostal: ['', [Validators.required, Validators.pattern('^[0-9]{4,5}$')]],\n      niveauEtudes: ['', Validators.required],\n      typePoste: ['', Validators.required],\n      niveauExperience: ['', Validators.required],\n      disponibilite: ['', Validators.required],\n      specialiteEtude: ['', Validators.required],\n      languages: [[], Validators.required],\n      commentaire: [''],\n      lettreMotivation: [null],\n      resume: [null, Validators.required],\n      recaptcha: ['', Validators.required],\n      jobOffer: {\n        jobOfferId: this.jobOfferId || ''\n      },\n      consent: [false, Validators.requiredTrue]\n    }, {\n      validators: this.emailMatchValidator\n    });\n    // Mise à jour du formulaire après récupération de l’offre\n    if (this.jobOfferId) {\n      this.jobApplicationForm.patchValue({\n        jobOfferId: this.jobOfferId\n      });\n    }\n    if (jobOfferId) {\n      this.jobOfferService.getJobById(jobOfferId).subscribe(job => {\n        this.selectedJob = job;\n        this.selectedJobId = job.jobOfferId; // Récupère l'ID de l'offre\n        console.log('Détails du job récupérés:', this.selectedJob);\n        // Mise à jour du formulaire une fois les données récupérées\n        this.jobApplicationForm.patchValue({\n          jobOfferId: this.selectedJobId\n        });\n      }, error => {\n        console.error('Erreur lors de la récupération du job:', error);\n      });\n      if ('webkitSpeechRecognition' in window) {\n        const {\n          webkitSpeechRecognition\n        } = window;\n        this.recognition = new webkitSpeechRecognition();\n        this.recognition.lang = 'fr-FR';\n        this.recognition.interimResults = false;\n        this.recognition.maxAlternatives = 1;\n        this.recognition.onstart = () => {\n          this.isListening = true;\n          console.log('Speech recognition started.');\n        };\n        this.recognition.onresult = event => {\n          const transcript = event.results[0][0].transcript;\n          const currentText = this.jobApplicationForm.get('commentaire')?.value || '';\n          this.jobApplicationForm.get('commentaire')?.setValue(currentText + ' ' + transcript);\n        };\n        this.recognition.onerror = event => {\n          console.error('Speech recognition error:', event.error);\n        };\n        this.recognition.onend = () => {\n          this.isListening = false;\n        };\n      } else {\n        console.warn('SpeechRecognition non supportée par ce navigateur.');\n      }\n    }\n    this.jobReference = jobOfferId;\n    console.log('Postuler pour l’offre :', this.jobReference);\n    // Vérifier si selectedJob existe et initialiser les données si nécessaire\n    if (this.selectedJob) {\n      console.log('Job sélectionné:', this.selectedJob);\n    }\n    this.jobReference = this.route.snapshot.paramMap.get('id');\n    console.log('Postuler pour l’offre :', this.jobReference);\n  }\n  mapFormToBackend() {\n    return {\n      firstName: this.jobApplicationForm.value.prenom,\n      lastName: this.jobApplicationForm.value.nom,\n      email: this.jobApplicationForm.value.email,\n      phone: this.jobApplicationForm.value.telephone,\n      address: this.jobApplicationForm.value.adresse,\n      city: this.jobApplicationForm.value.ville,\n      zipCode: this.jobApplicationForm.value.codePostal,\n      educationLevel: this.jobApplicationForm.value.niveauEtudes,\n      experienceLevel: this.jobApplicationForm.value.niveauExperience,\n      fieldOfStudy: this.jobApplicationForm.value.specialiteEtude,\n      jobType: this.jobApplicationForm.value.typePoste ? String(this.jobApplicationForm.value.typePoste) : null,\n      immediateAvailability: this.jobApplicationForm.value.disponibilite,\n      languages: this.jobApplicationForm.value.languages ? this.jobApplicationForm.value.languages.join(', ') : null,\n      commentaire: this.jobApplicationForm.value.commentaire || '',\n      resume: this.jobApplicationForm.value.resume,\n      lettreMotivation: this.jobApplicationForm.value.lettreMotivation,\n      // jobOfferId: this.jobApplicationForm.value.jobOfferId||'', // Utiliser la valeur du formulaire\n      appliedAt: new Date().toISOString(),\n      jobOffer: {\n        jobOfferId: this.jobOfferId || ''\n      }\n    };\n  }\n  handleCaptcha(token) {\n    console.log(\"reCAPTCHA Token reçu :\", token);\n    if (token) {\n      this.jobApplicationForm.controls['recaptcha'].setValue(token);\n      console.log(\"Valeur du recaptcha mise à jour :\", this.jobApplicationForm.controls['recaptcha'].value);\n    } else {\n      this.jobApplicationForm.controls['recaptcha'].setErrors({\n        required: true\n      });\n      console.warn(\"reCAPTCHA non résolu ou expiré.\");\n    }\n  }\n  validateFile(file, allowedTypes, maxSizeMB) {\n    if (!file) return false;\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\n    if (!allowedTypes.includes(file.type)) {\n      alert(`Seuls les fichiers ${allowedTypes.join(', ')} sont autorisés.`);\n      return false;\n    }\n    if (file.size > maxSizeBytes) {\n      alert(`La taille du fichier ne doit pas dépasser ${maxSizeMB} Mo.`);\n      return false;\n    }\n    return true;\n  }\n  dateNaissanceValidator(control) {\n    if (!control.value) {\n      return null; // Ne pas valider si le champ est vide (handled par Validators.required)\n    }\n\n    const today = new Date();\n    const birthDate = new Date(control.value);\n    if (birthDate >= today) {\n      return {\n        'invalidDate': true\n      };\n    }\n    return null;\n  }\n  emailMatchValidator(form) {\n    const email = form.get('email')?.value;\n    const confirmEmail = form.get('confirmEmail')?.value;\n    return email === confirmEmail ? null : {\n      emailMismatch: true\n    };\n  }\n  // Méthode pour envoyer la candidature au backend\n  submitApplication() {\n    this.submitted = true; // Activer l'affichage des erreurs\n    const formData = {\n      ...this.jobApplicationForm.value,\n      jobOfferId: this.jobOfferId\n    };\n    formData.disponibilite = formData.disponibilite === 'True' ? 1 : 0;\n    formData.resume = this.jobApplicationForm.value.resume;\n    formData.lettreMotivation = this.jobApplicationForm.value.lettreMotivation;\n    const mappedData = this.mapFormToBackend();\n    console.log(\"Données envoyées au backend :\", mappedData);\n    if (this.jobApplicationForm.invalid) {\n      alert('formulaire invalide');\n      console.log('Le formulaire est invalide', this.jobApplicationForm.errors);\n      return;\n    }\n    // mappedData.jobOfferId = this.selectedJob ? this.selectedJob.jobOfferId : null;\n    this.jobApplicationService.submitJobApplication(mappedData).subscribe(response => {\n      console.log('Candidature envoyée avec succès', response);\n      alert('Votre candidature a bien été envoyée !');\n      this.location.back();\n      // Récupérer l'email du candidat et appeler le backend pour envoyer l'email\n      const candidatEmail = this.jobApplicationForm.value.email;\n    }, error => {\n      console.error('Erreur lors de l’envoi de la candidature', error);\n    });\n  }\n  submitApplication2() {\n    const formData = new FormData();\n    // Convertir l'objet formulaire en JSON et l'ajouter sous forme de chaîne\n    const jobApplicationData = JSON.stringify(this.jobApplicationForm.value);\n    const jobApplicationBlob = new Blob([jobApplicationData], {\n      type: 'application/json'\n    });\n    formData.append(\"jobApplication\", jobApplicationBlob);\n    // Ajouter les fichiers (Assurez-vous que `resumeFile` et `lettreMotivationFile` sont définis)\n    if (this.cvFile) {\n      formData.append(\"resume\", this.cvFile, this.cvFile.name);\n    }\n    if (this.lettreMotivationFile) {\n      formData.append(\"lettreMotivation\", this.lettreMotivationFile, this.lettreMotivationFile.name);\n    }\n    this.http.post('http://localhost:8081/jobapplications/apply', formData, {\n      responseType: 'text'\n    }).subscribe(response => {\n      console.log(\"Réponse du backend :\", response);\n    }, error => {\n      console.error(\"Erreur lors de l'envoi de la candidature\", error);\n    });\n  }\n  // Fonction pour récupérer les fichiers du formulaire\n  onFileSelected(event, type) {\n    if (event.target.files.length > 0) {\n      if (type === \"resume\") {\n        this.cvFile = event.target.files[0];\n      } else if (type === \"lettreMotivation\") {\n        this.lettreMotivationFile = event.target.files[0];\n      }\n    }\n  }\n  uploadFiles(cvFile, lettreMotivationFile) {\n    const formData = new FormData();\n    formData.append('cv', cvFile);\n    formData.append('lettreMotivation', lettreMotivationFile);\n    return this.http.post('http://localhost:8081/jobapplications/fileUpload', formData).pipe(map(response => {\n      return {\n        resumePath: `/uploads/${cvFile.name}`,\n        lettreMotivationPath: `/uploads/${lettreMotivationFile.name}`\n      };\n    }));\n  }\n  closeForm() {\n    this.location.back();\n  }\n  stopRecording() {\n    this.voiceRecognitionService.stop();\n    this.message += this.voiceRecognitionService.text;\n    this.voiceRecognitionService.text = ''; // Clear the recognized text after appending to message\n  }\n\n  submitMessage(event) {\n    // Handle message submission logic here\n    console.log('Message submitted:', this.message);\n    this.message = ''; // Clear the input after submission\n  }\n\n  startListening() {\n    this.voiceRecognitionService.start();\n  }\n  stopListening() {\n    this.voiceRecognitionService.stop();\n  }\n  get transcribedText() {\n    return this.voiceRecognitionService.text;\n  }\n};\n__decorate([Input()], JobApplicationFormComponent.prototype, \"selectedJob\", void 0);\n__decorate([Output()], JobApplicationFormComponent.prototype, \"closeFormEvent\", void 0);\nJobApplicationFormComponent = __decorate([Component({\n  selector: 'app-job-application-form',\n  templateUrl: './job-application-form.component.html',\n  styleUrls: ['./job-application-form.component.css']\n})], JobApplicationFormComponent);","map":{"version":3,"names":["Component","EventEmitter","Input","Output","Validators","NavigationEnd","map","JobApplicationFormComponent","constructor","fb","jobApplicationService","jobOfferService","pr","voiceRecognitionService","route","location","router","http","closeFormEvent","message","jobReference","selectedJobId","siteKey","submitted","isListening","id","snapshot","paramMap","get","cvFile","lettreMotivationFile","events","subscribe","event","window","scrollTo","ngOnInit","init","storedJob","localStorage","getItem","selectedJob","JSON","parse","jobOfferId","console","log","params","jobApplicationForm","group","civilite","required","nom","minLength","prenom","dateNaissance","dateNaissanceValidator","email","confirmEmail","telephone","pattern","adresse","ville","codePostal","niveauEtudes","typePoste","niveauExperience","disponibilite","specialiteEtude","languages","commentaire","lettreMotivation","resume","recaptcha","jobOffer","consent","requiredTrue","validators","emailMatchValidator","patchValue","getJobById","job","error","webkitSpeechRecognition","recognition","lang","interimResults","maxAlternatives","onstart","onresult","transcript","results","currentText","value","setValue","onerror","onend","warn","mapFormToBackend","firstName","lastName","phone","address","city","zipCode","educationLevel","experienceLevel","fieldOfStudy","jobType","String","immediateAvailability","join","appliedAt","Date","toISOString","handleCaptcha","token","controls","setErrors","validateFile","file","allowedTypes","maxSizeMB","maxSizeBytes","includes","type","alert","size","control","today","birthDate","form","emailMismatch","submitApplication","formData","mappedData","invalid","errors","submitJobApplication","response","back","candidatEmail","submitApplication2","FormData","jobApplicationData","stringify","jobApplicationBlob","Blob","append","name","post","responseType","onFileSelected","target","files","length","uploadFiles","pipe","resumePath","lettreMotivationPath","closeForm","stopRecording","stop","text","submitMessage","startListening","start","stopListening","transcribedText","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\job-application-form\\job-application-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Location } from '@angular/common'; \nimport { JobApplicationService } from '../services/job-application.service';\nimport { JobOfferService } from '../services/job-offer.service';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { VoiceRecognitionService } from '../services/voice-recognition.service';\ninterface IWindow extends Window {\n  webkitSpeechRecognition: any;\n}\n@Component({\n  selector: 'app-job-application-form',\n  templateUrl: './job-application-form.component.html',\n  styleUrls: ['./job-application-form.component.css']\n})\nexport class JobApplicationFormComponent  implements OnInit  {\n  @Input() selectedJob: any;\n  @Output() closeFormEvent = new EventEmitter<void>(); \n  message: string = '';\n  jobApplicationForm!: FormGroup;\n  jobReference: string | null = null;\n  selectedJobId: number | null = null;\n  jobOfferId!: number;\n  siteKey: string = '6Le5S-MqAAAAALSbrYTUmV1IgrBQPBExN4zJpBVq';\n  submitted = false; // Variable pour suivre l'état de soumission\n\n  isListening = false;\n  recognition: any;\n\n    constructor(private fb: FormBuilder,\n      private jobApplicationService: JobApplicationService, private jobOfferService:JobOfferService,pr voiceRecognitionService: VoiceRecognitionService,\n      private route: ActivatedRoute, private location: Location,private router: Router,private http:HttpClient) {\n      this.router.events.subscribe((event) => {\n        if (event instanceof NavigationEnd) {\n          window.scrollTo(0, 0); // Remonte en haut de la page\n        }\n      });\n    }\n    ngOnInit(): void {\n      this.voiceRecognitionService.init();\n      const storedJob = localStorage.getItem('selectedJob');\n  if (storedJob) {\n    this.selectedJob = JSON.parse(storedJob);\n  }\n      const jobOfferId = this.route.snapshot.paramMap.get('id'); // Récupérer l'ID depuis l'URL\n      // Vérifier l'ID du job dans l'URL\n    console.log('ID du job dans l\\'URL:', jobOfferId);\n\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.jobOfferId = +id; // Convert string to number\n        \n      }\n    });\n\n    this.jobApplicationForm = this.fb.group({\n      civilite: ['', Validators.required],\n      nom: ['', [Validators.required, Validators.minLength(2)]],\n      prenom: ['', [Validators.required, Validators.minLength(2)]],\n      dateNaissance: ['', [Validators.required, this.dateNaissanceValidator]],\n      email: ['', [Validators.required, Validators.email]],\n      confirmEmail: ['', [Validators.required, Validators.email]],\n      telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n      adresse: ['', Validators.required],\n      ville: ['', Validators.required],\n      codePostal: ['', [Validators.required, Validators.pattern('^[0-9]{4,5}$')]],\n      niveauEtudes: ['', Validators.required],\n      typePoste: ['', Validators.required],\n      niveauExperience: ['', Validators.required],\n      disponibilite: ['', Validators.required],\n      specialiteEtude: ['', Validators.required],\n      languages: [[], Validators.required], \n      commentaire: [''],\n      lettreMotivation: [null],\n      resume: [null, Validators.required],\n      recaptcha: ['', Validators.required], // Date d'application automatique\n      jobOffer: { jobOfferId: this.jobOfferId||'' },\n      consent: [false, Validators.requiredTrue]},\n      {\n        validators: this.emailMatchValidator\n    });\n     // Mise à jour du formulaire après récupération de l’offre\n  if (this.jobOfferId) {\n    this.jobApplicationForm.patchValue({ jobOfferId: this.jobOfferId });\n  }\n    if (jobOfferId) {\n      this.jobOfferService.getJobById(jobOfferId).subscribe(\n        (job) => {\n          this.selectedJob = job;\n          this.selectedJobId = job.jobOfferId; // Récupère l'ID de l'offre\n          console.log('Détails du job récupérés:', this.selectedJob);\n       // Mise à jour du formulaire une fois les données récupérées\n       this.jobApplicationForm.patchValue({ jobOfferId: this.selectedJobId });\n      },\n      (error) => {\n        console.error('Erreur lors de la récupération du job:', error);\n      }\n    );\n    if ('webkitSpeechRecognition' in window) {\n      const { webkitSpeechRecognition } = window as IWindow;\n\n      this.recognition = new webkitSpeechRecognition();\n      this.recognition.lang = 'fr-FR';\n      this.recognition.interimResults = false;\n      this.recognition.maxAlternatives = 1;\n  \n      this.recognition.onstart = () => {\n        this.isListening = true;\n        console.log('Speech recognition started.');\n      };\n  \n      this.recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        const currentText = this.jobApplicationForm.get('commentaire')?.value || '';\n        this.jobApplicationForm.get('commentaire')?.setValue(currentText + ' ' + transcript);\n      };\n  \n      this.recognition.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n      };\n  \n      this.recognition.onend = () => {\n        this.isListening = false;\n      };\n    } else {\n      console.warn('SpeechRecognition non supportée par ce navigateur.');\n    }\n  }\n    this.jobReference = jobOfferId;\n    console.log('Postuler pour l’offre :', this.jobReference);\n    // Vérifier si selectedJob existe et initialiser les données si nécessaire\n    if (this.selectedJob) {\n      console.log('Job sélectionné:', this.selectedJob);\n    }\n    this.jobReference = this.route.snapshot.paramMap.get('id');\n    console.log('Postuler pour l’offre :', this.jobReference);\n    }\n     id = this.route.snapshot.paramMap.get('id'); // Récupérer l'ID depuis l'URL\n\n    private mapFormToBackend(): any {\n      return {\n        firstName: this.jobApplicationForm.value.prenom,\n        lastName: this.jobApplicationForm.value.nom,\n        email: this.jobApplicationForm.value.email,\n        phone: this.jobApplicationForm.value.telephone,\n        address: this.jobApplicationForm.value.adresse,\n        city: this.jobApplicationForm.value.ville,\n        zipCode: this.jobApplicationForm.value.codePostal,\n        educationLevel: this.jobApplicationForm.value.niveauEtudes,\n        experienceLevel: this.jobApplicationForm.value.niveauExperience,\n        fieldOfStudy: this.jobApplicationForm.value.specialiteEtude,\n        jobType: this.jobApplicationForm.value.typePoste ? String(this.jobApplicationForm.value.typePoste) : null,\n        immediateAvailability: this.jobApplicationForm.value.disponibilite,\n        languages: this.jobApplicationForm.value.languages ? this.jobApplicationForm.value.languages.join(', ') : null,\n        commentaire: this.jobApplicationForm.value.commentaire || '', // Ajout du commentaire\n        resume: this.jobApplicationForm.value.resume,\n        lettreMotivation: this.jobApplicationForm.value.lettreMotivation , // Ajout de la lettre de motivation\n       // jobOfferId: this.jobApplicationForm.value.jobOfferId||'', // Utiliser la valeur du formulaire\n        appliedAt: new Date().toISOString(), // Date d'application automatique\n        jobOffer: { jobOfferId: this.jobOfferId||'' },\n\n\n      };\n   \n\n      \n    }\n\n    \n   \n\n    handleCaptcha(token: string | null) {\n      console.log(\"reCAPTCHA Token reçu :\", token);\n      if (token) {\n        this.jobApplicationForm.controls['recaptcha'].setValue(token);\n        console.log(\"Valeur du recaptcha mise à jour :\", this.jobApplicationForm.controls['recaptcha'].value);\n      } else {\n        this.jobApplicationForm.controls['recaptcha'].setErrors({ required: true });\n        console.warn(\"reCAPTCHA non résolu ou expiré.\");\n      }\n    }\n    \n    validateFile(file: File | null, allowedTypes: string[], maxSizeMB: number): boolean {\n      if (!file) return false;\n    \n      const maxSizeBytes = maxSizeMB * 1024 * 1024;\n      if (!allowedTypes.includes(file.type)) {\n        alert(`Seuls les fichiers ${allowedTypes.join(', ')} sont autorisés.`);\n        return false;\n      }\n      if (file.size > maxSizeBytes) {\n        alert(`La taille du fichier ne doit pas dépasser ${maxSizeMB} Mo.`);\n        return false;\n      }\n      return true;\n    }\n    cvFile: File | null = null;\n    lettreMotivationFile: File | null = null;\n    \n \n    \n    \n     \n    \n    dateNaissanceValidator(control: AbstractControl): { [key: string]: boolean } | null {\n      if (!control.value) {\n        return null; // Ne pas valider si le champ est vide (handled par Validators.required)\n      }\n      const today = new Date();\n      const birthDate = new Date(control.value);\n      \n      if (birthDate >= today) {\n        return { 'invalidDate': true };\n      }\n      return null;\n    }\n    emailMatchValidator(form: FormGroup) {\n      const email = form.get('email')?.value;\n      const confirmEmail = form.get('confirmEmail')?.value;\n      return email === confirmEmail ? null : { emailMismatch: true };\n    }\n// Méthode pour envoyer la candidature au backend\nsubmitApplication(): void {\n  this.submitted = true; // Activer l'affichage des erreurs\n\n  const formData = {\n    ...this.jobApplicationForm.value,\n    jobOfferId: this.jobOfferId\n  };\n  formData.disponibilite = formData.disponibilite === 'True' ? 1 : 0;\n  formData.resume = this.jobApplicationForm.value.resume;\n  formData.lettreMotivation = this.jobApplicationForm.value.lettreMotivation;\n\n\n  const mappedData = this.mapFormToBackend();\n \n  console.log(\"Données envoyées au backend :\", mappedData);\n  if (this.jobApplicationForm.invalid) {\n    alert('formulaire invalide');\n    console.log('Le formulaire est invalide', this.jobApplicationForm.errors);\n    return;\n  }\n\n\n\n // mappedData.jobOfferId = this.selectedJob ? this.selectedJob.jobOfferId : null;\n  this.jobApplicationService.submitJobApplication(mappedData).subscribe(\n    response => {\n      console.log('Candidature envoyée avec succès', response);\n      alert('Votre candidature a bien été envoyée !');\n      this.location.back();\n      // Récupérer l'email du candidat et appeler le backend pour envoyer l'email\n      const candidatEmail = this.jobApplicationForm.value.email;\n    },\n    error => {\n      console.error('Erreur lors de l’envoi de la candidature', error);\n    }\n  );\n}\nsubmitApplication2() {\n  const formData = new FormData();\n\n  // Convertir l'objet formulaire en JSON et l'ajouter sous forme de chaîne\n  const jobApplicationData = JSON.stringify(this.jobApplicationForm.value);\n  const jobApplicationBlob = new Blob([jobApplicationData], { type: 'application/json' });\n  formData.append(\"jobApplication\", jobApplicationBlob);\n\n  // Ajouter les fichiers (Assurez-vous que `resumeFile` et `lettreMotivationFile` sont définis)\n  if (this.cvFile) {\n    formData.append(\"resume\", this.cvFile, this.cvFile.name);\n  }\n  if (this.lettreMotivationFile) {\n    formData.append(\"lettreMotivation\", this.lettreMotivationFile, this.lettreMotivationFile.name);\n  }\n\n\n  this.http.post('http://localhost:8081/jobapplications/apply', formData, { responseType: 'text' as 'json' })\n  .subscribe(\n    response => {\n      console.log(\"Réponse du backend :\", response);\n    },\n    error => {\n      console.error(\"Erreur lors de l'envoi de la candidature\", error);\n    }\n  );\n\n}\n\n// Fonction pour récupérer les fichiers du formulaire\nonFileSelected(event: any, type: string) {\n  if (event.target.files.length > 0) {\n    if (type === \"resume\") {\n      this.cvFile = event.target.files[0];\n    } else if (type === \"lettreMotivation\") {\n      this.lettreMotivationFile = event.target.files[0];\n    }\n  }\n}\n\nuploadFiles(cvFile: File, lettreMotivationFile: File) {\n  const formData = new FormData();\n\n  formData.append('cv', cvFile);\n  formData.append('lettreMotivation', lettreMotivationFile);\n\n  return this.http.post('http://localhost:8081/jobapplications/fileUpload', formData).pipe(\n    map((response: any) => {\n      return {\n        resumePath: `/uploads/${cvFile.name}`,\n        lettreMotivationPath: `/uploads/${lettreMotivationFile.name}`\n      };\n    })\n  );\n}\n\n\n\n  closeForm(): void {\n    this.location.back(); \n  }\n\n \n\n  stopRecording() {\n    this.voiceRecognitionService.stop();\n    this.message += this.voiceRecognitionService.text;\n    this.voiceRecognitionService.text = ''; // Clear the recognized text after appending to message\n  }\n\n  submitMessage(event: Event) {\n    // Handle message submission logic here\n    console.log('Message submitted:', this.message);\n    this.message = ''; // Clear the input after submission\n  }\n\n  startListening() {\n    this.voiceRecognitionService.start();\n  }\n\n  stopListening() {\n    this.voiceRecognitionService.stop();\n  }\n\n  get transcribedText(): string {\n    return this.voiceRecognitionService.text;\n  }\n}\n  \n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}