{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class VoiceRecognitionService {\n  constructor() {\n    this.isListening = false;\n    this.text = '';\n    this.tempWords = '';\n    this.transcript = new Subject();\n    const {\n      webkitSpeechRecognition\n    } = window;\n    this.recognition = new webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'fr-FR';\n    this.recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      this.tempWords = transcript;\n    };\n    this.recognition.onend = () => {\n      this.wordConcat();\n      this.isListening = false;\n      console.log('End speech recognition');\n    };\n  }\n  start() {\n    if (!this.isListening) {\n      this.recognition.start();\n      this.isListening = true;\n      console.log('Speech recognition started');\n    } else {\n      console.log('Recognition is already running');\n    }\n  }\n  stop() {\n    if (this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n      console.log('Speech recognition stopped');\n    }\n  }\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}.`.replace(/\\s+/g, ' ').trim();\n      this.transcript.next(this.text);\n      this.tempWords = '';\n    }\n  }\n  getTranscript() {\n    return this.transcript.asObservable();\n  }\n  static {\n    this.ɵfac = function VoiceRecognitionService_Factory(t) {\n      return new (t || VoiceRecognitionService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VoiceRecognitionService,\n      factory: VoiceRecognitionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Subject","VoiceRecognitionService","constructor","isListening","text","tempWords","transcript","webkitSpeechRecognition","window","recognition","continuous","interimResults","lang","onresult","event","Array","from","results","map","result","join","onend","wordConcat","console","log","start","stop","trim","replace","next","getTranscript","asObservable","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Malek\\Desktop\\pidev\\insurance-front\\src\\app\\services\\voice-recognition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\ndeclare var webkitSpeechRecognition: any;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VoiceRecognitionService {\n  recognition: any;\n  isListening = false;\n  text = '';\n  tempWords = '';\n  transcript = new Subject<string>();\n\n  constructor() {\n   \n    const { webkitSpeechRecognition }: IWindow = window as IWindow;\n    this.recognition = new webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = 'fr-FR';\n\n    this.recognition.onresult = (event: any) => {\n      const transcript = Array.from(event.results)\n        .map((result: any) => result[0].transcript)\n        .join('');\n      this.tempWords = transcript;\n    };\n\n    this.recognition.onend = () => {\n      this.wordConcat();\n      this.isListening = false;\n      console.log('End speech recognition');\n    };\n  }\n\n  start() {\n    if (!this.isListening) {\n      this.recognition.start();\n      this.isListening = true;\n      console.log('Speech recognition started');\n    } else {\n      console.log('Recognition is already running');\n    }\n  }\n\n  stop() {\n    if (this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n      console.log('Speech recognition stopped');\n    }\n  }\n\n  wordConcat() {\n    if (this.tempWords.trim()) {\n      this.text = `${this.text} ${this.tempWords}.`.replace(/\\s+/g, ' ').trim();\n      this.transcript.next(this.text);\n      this.tempWords = '';\n    }\n  }\n\n  getTranscript(): Observable<string> {\n    return this.transcript.asObservable();\n  }\n}\n\n"],"mappings":"AACA,SAAsCA,OAAO,QAAQ,MAAM;;AAO3D,OAAM,MAAOC,uBAAuB;EAOlCC,YAAA;IALA,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,IAAI,GAAG,EAAE;IACT,KAAAC,SAAS,GAAG,EAAE;IACd,KAAAC,UAAU,GAAG,IAAIN,OAAO,EAAU;IAIhC,MAAM;MAAEO;IAAuB,CAAE,GAAYC,MAAiB;IAC9D,IAAI,CAACC,WAAW,GAAG,IAAIF,uBAAuB,EAAE;IAChD,IAAI,CAACE,WAAW,CAACC,UAAU,GAAG,IAAI;IAClC,IAAI,CAACD,WAAW,CAACE,cAAc,GAAG,IAAI;IACtC,IAAI,CAACF,WAAW,CAACG,IAAI,GAAG,OAAO;IAE/B,IAAI,CAACH,WAAW,CAACI,QAAQ,GAAIC,KAAU,IAAI;MACzC,MAAMR,UAAU,GAAGS,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAW,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACb,UAAU,CAAC,CAC1Cc,IAAI,CAAC,EAAE,CAAC;MACX,IAAI,CAACf,SAAS,GAAGC,UAAU;IAC7B,CAAC;IAED,IAAI,CAACG,WAAW,CAACY,KAAK,GAAG,MAAK;MAC5B,IAAI,CAACC,UAAU,EAAE;MACjB,IAAI,CAACnB,WAAW,GAAG,KAAK;MACxBoB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC;EACH;EAEAC,KAAKA,CAAA;IACH,IAAI,CAAC,IAAI,CAACtB,WAAW,EAAE;MACrB,IAAI,CAACM,WAAW,CAACgB,KAAK,EAAE;MACxB,IAAI,CAACtB,WAAW,GAAG,IAAI;MACvBoB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;KAC1C,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;EAEjD;EAEAE,IAAIA,CAAA;IACF,IAAI,IAAI,CAACvB,WAAW,EAAE;MACpB,IAAI,CAACM,WAAW,CAACiB,IAAI,EAAE;MACvB,IAAI,CAACvB,WAAW,GAAG,KAAK;MACxBoB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;EAE7C;EAEAF,UAAUA,CAAA;IACR,IAAI,IAAI,CAACjB,SAAS,CAACsB,IAAI,EAAE,EAAE;MACzB,IAAI,CAACvB,IAAI,GAAG,GAAG,IAAI,CAACA,IAAI,IAAI,IAAI,CAACC,SAAS,GAAG,CAACuB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACD,IAAI,EAAE;MACzE,IAAI,CAACrB,UAAU,CAACuB,IAAI,CAAC,IAAI,CAACzB,IAAI,CAAC;MAC/B,IAAI,CAACC,SAAS,GAAG,EAAE;;EAEvB;EAEAyB,aAAaA,CAAA;IACX,OAAO,IAAI,CAACxB,UAAU,CAACyB,YAAY,EAAE;EACvC;;;uBAzDW9B,uBAAuB;IAAA;EAAA;;;aAAvBA,uBAAuB;MAAA+B,OAAA,EAAvB/B,uBAAuB,CAAAgC,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}